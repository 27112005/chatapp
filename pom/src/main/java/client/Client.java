/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package client;

import javax.swing.*;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import RSA.Mahoaclient;

/**
 *
 * @author ASUS
 */
public class Client extends javax.swing.JFrame {

    private Thread thread;
    private BufferedWriter os;
    private BufferedReader is;
    private Socket socketOfClient;
    private List<String> onlineList;
    private int id;
    private static Mahoaclient mhclient;
    private String username;


    /**
     * Creates new form Client
     */
    public Client (String username) {
        this.username = username;
        initComponents();
        mhclient = new Mahoaclient();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        jTextArea1.setEditable(false);
        jTextArea2.setEditable(false);
        onlineList = new ArrayList<>();

        id = -1;
        setTitle("chat app - " + username);
        setUpSocket();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Danh sách online", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Gửi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Chọn người nhân");

        jLabel2.setText("Nhập tin nhắn");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("{Người nhận}");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Nhắn tin", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        String messageContent = jTextField1.getText();
//        if(messageContent.isEmpty()){
//            JOptionPane.showMessageDialog(rootPane, "Bạn chưa nhập tin nhắn");
//            return;
//        }
//        try{
//        if(jComboBox1.getSelectedIndex()==0){
//            try {
//                write("send-to-global"+","+messageContent+","+this.id);
//                jTextArea1.setText(jTextArea1.getText()+"Bạn: "+messageContent+"\n");
//                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
//            } catch (IOException ex) {
//                JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
//            }
//        }else{
//            try {
//                String[] parner = ((String)jComboBox1.getSelectedItem()).split(" ");
//                write("send-to-person"+","+messageContent+","+this.id+","+parner[1]);
//                jTextArea1.setText(jTextArea1.getText()+"Bạn (tới Client "+parner[1]+"): "+messageContent+"\n");
//                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
//            } catch (IOException ex) {
//                JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
//            }
//        }
//        jTextField1.setText("");
//    }//GEN-LAST:event_jButton1ActionPerformed
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    String messageContent = jTextField1.getText();
    if(messageContent.isEmpty()){
        JOptionPane.showMessageDialog(rootPane, "Bạn chưa nhập tin nhắn");
        return;
    }
    try {
        if(jComboBox1.getSelectedIndex()==0){
            sendMessage("send-to-global,"+messageContent+","+this.id);
            jTextArea1.append("Bạn: "+messageContent+"\n");
        } else {
            String[] partner = ((String)jComboBox1.getSelectedItem()).split(" ");
            sendMessage("send-to-person,"+messageContent+","+this.id+","+partner[1]);
            jTextArea1.append("Bạn (tới Client "+partner[1]+"): "+messageContent+"\n");
        }
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
    } catch (IOException ex) {
        showErrorMessage("Có lỗi xảy ra khi gửi tin nhắn: " + ex.getMessage());
//        JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra khi gửi tin nhắn: " + ex.getMessage());
    }
    jTextField1.setText("");
}
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
      String messageContent = jTextField1.getText();
      if(messageContent.isEmpty()){
          JOptionPane.showMessageDialog(this,"Bạn chưa nhập tin nhắn","lỗi",JOptionPane.ERROR_MESSAGE);

          return;

      }
        if(jComboBox1.getSelectedIndex()==0){
            try{
                write("send-to-global"+","+messageContent+","+this.id);
                jTextArea1.setText(jTextArea1.getText()+"bạn: "+messageContent+"\n");
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());

            }catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane,"Có lỗi xảy ra ");
            }
//            jLabel3.setText("Global");
        }
        else{
//            jLabel3.setText("Đang nhắn với "+jComboBox1.getSelectedItem());
            Object selectedItem = jComboBox1.getSelectedItem();
            if(selectedItem != null){
                try{
                    String [] parner = selectedItem.toString().split ("");
                    if(parner.length>1) {
                        write("send-to-person" + "," + messageContent + "," + this.id + "," + parner[1]);
                        jTextArea1.setText(jTextArea1.getText() + "bạn(tới Client" + parner[1] + "): " + messageContent + "\n");
                        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "lỗi không thể x");
                    }
                }catch (IOException ex) {
                    JOptionPane.showMessageDialog(rootPane, "có lỗi xảy ra ");
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, " vui lòng chọn người nhận ");
            }
        }
        jTextField1.setText("");
    }//GEN-LAST:event_jComboBox1ActionPerformed
//private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
//    if(jComboBox1.getSelectedIndex()==0){
//        jLabel3.setText("Gửi tới tất cả");
//    } else {
//        jLabel3.setText("Đang nhắn với " + jComboBox1.getSelectedItem());
//    }
//}

//    private void setUpSocket() {
//        try {
//            thread = new Thread(() ->{
//                @Override
//                public void run() {
//
//                    try {
//                        // Gửi yêu cầu kết nối tới Server đang lắng nghe
//                        // trên máy 'localhost' cổng 7777.
//                        socketOfClient = new Socket("localhost", 7777);
//                        out.println("Kết nối thành công!");
//                        // Tạo luồng đầu ra tại client (Gửi dữ liệu tới server)
//                        os = new BufferedWriter(new OutputStreamWriter(socketOfClient.getOutputStream()));
//                        // Luồng đầu vào tại Client (Nhận dữ liệu từ server).
//                        is = new BufferedReader(new InputStreamReader(socketOfClient.getInputStream()));
//                        String message;
//                        while (true) {
//
//                            message = is.readLine();
//                            if(message==null){
//                                break;
//                            }
//                            String[] messageSplit = message.split(",");
//                            if(messageSplit[0].equals("get-id")){
//                                setID(Integer.parseInt(messageSplit[1]));
//                                setIDTitle();
//                            }
//                            if (messageSplit[0].equals("update-online-list")) {
//                                onlineList = new ArrayList<>();
//                                String online ="";
//                                String[] onlineSplit = messageSplit[1].split("-");
//                                for(int i=0; i<onlineSplit.length; i++){
//                                    onlineList.add(onlineSplit[i]);
//                                    online+="Client "+onlineSplit[i]+" đang online\n";
//                                }
//                                jTextArea2.setText(online);
//                                updateCombobox();
//                            }
//                            if(messageSplit[0].equals("global-message")){
//                                jTextArea1.setText(jTextArea1.getText()+messageSplit[1]+"\n");
//                                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
//                            }
//                        }
////
//                    } catch (UnknownHostException e) {
//                      System.out.println("Không thể kết nối tới server:"+e.getMessage());
//                    } catch (IOException e) {
//                        System.out.println("LỖi IO:"+e.getMessage());
//                    }
//                }
//            };
//            thread.start();
//        } catch (Exception e) {
//        }
//    }
private void setUpSocket() {
//        try{
//            write("login, "+ username);
//
//        }catch(IOException e){
//            e.printStackTrace();
//
//        }
    thread = new Thread(() -> {
        try {
            socketOfClient = new Socket("localhost", 9999);
            System.out.println("Kết nối thành công!");

            os = new BufferedWriter(new OutputStreamWriter(socketOfClient.getOutputStream()));
            is = new BufferedReader(new InputStreamReader(socketOfClient.getInputStream()));

            sendMessage("login,"+ username);
            sendLoginInfo();

            String message;
            while ((message = is.readLine()) != null) {
                String decryptedMessage = mhclient.maHoaDuLieu(message);
                processIncomingMessage(decryptedMessage);
            }
        } catch (UnknownHostException e) {
            showErrorMessage("Không thể kết nối tới server: " + e.getMessage());
        } catch (IOException e) {
            showErrorMessage("Lỗi IO: " + e.getMessage());
        } finally {
            closeConnection();
        }
    });
    thread.start();
}

    public void sendMessage(String message) throws IOException {
        if (os == null) {
            throw new IOException("Chưa kết nối tới server");
        }
        try {
            String encryptedMessage = mhclient.maHoaDuLieu(message);
            System.out.println("Tin nhắn đã được mã hóa: " + encryptedMessage);
            write(encryptedMessage);
        } catch (Exception e) {
            throw new IOException("Lỗi khi mã hóa tin nhắn: " + e.getMessage(), e);
        }
    }
private void sendLoginInfo() throws IOException {
        if(username == null || username.isEmpty()){
            throw new IllegalStateException("tên người dùng không hợp lệ");

        }
        String loginMessage = "login," + username;
        sendMessage(loginMessage);

}

    private void processIncomingMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            try {
//                String ecrypptedMessage = mhclient.maHoaDuLieu(message);
                String[] messageSplit = message.split(",");
                switch (messageSplit[0]) {
                    case "get-id":
                        setID(Integer.parseInt(messageSplit[1]));
                        setIDTitle();
                        break;
                    case "update-online-list":
                        updateOnlineList(messageSplit[1]);
                        break;
                    case "global-message":
                        appendToChat(messageSplit[1]);
                        break;
                    case "private-message":
                        appendToChat("Client"+messageSplit[1]+":"+messageSplit[2]);
                        break;
                    default:
                        System.out.println("Không xác định được loại tin nhắn: " + message);
                }
            }catch (Exception e){
                System.out.println("Lỗi khi xử lý tin nhắn : " + e.getMessage())
                ;
            }
        });
    }
    private void appendToChat(String message) {
        jTextArea1.append(message + "\n");
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
    }

    private void updateOnlineList(String onlineListString) {
        onlineList.clear();
        StringBuilder online = new StringBuilder();
        String[] onlineSplit = onlineListString.split("-");
        for (String client : onlineSplit) {
            onlineList.add(client);
            online.append("Client ").append(client).append(" đang online\n");
        }
        jTextArea2.setText(online.toString());
        updateCombobox();
    }

    private void showErrorMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(this, message, "Lỗi", JOptionPane.ERROR_MESSAGE);
        });
    }
    private void updateCombobox() {
        SwingUtilities.invokeLater(() -> {
            jComboBox1.removeAllItems();
            jComboBox1.addItem("Gửi tất cả");
            String idString = "" + this.id;
            for (String e : onlineList) {
                if (!e.equals(idString)) {
                    jComboBox1.addItem("Client " + e);
                }
            }
            jComboBox1.setSelectedIndex(0);
        });
    }

    public String receiveMessage(){
        try{
            return is.readLine();
        }catch (IOException e ){
           e.printStackTrace();
           return null;
        }
    }
    public void closeConnection() {
        try {
            if (is != null) is.close();
            if (os != null) os.close();
            if (socketOfClient != null) socketOfClient.close();
            System.out.println("Đã ngắt kết nối tới server");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void setIDTitle(){
        this.setTitle("Client "+this.id);
    }
    private void setID(int id){
        this.id = id;
    }
    private void write(String message) throws IOException{
        os.write(message);
        os.newLine();
        os.flush();
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        String username = JOptionPane.showInputDialog("nhâpj tên người dung");
        if(username == null || username.isEmpty()){
            SwingUtilities.invokeLater(() -> new Client(username));

        }else{
            JOptionPane.showMessageDialog(null, "tên người dùng không hợp lệ", "lỗi", JOptionPane.ERROR_MESSAGE);

        }
       Client client = new Client(username);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
